# site.yml — единый прогон через Semaphore
# ожидаемые группы в inventory:
# [k8s_master], [k8s_workers], [k8s_all:children]=k8s_master,k8s_workers

# ====== 01. PREPARE ALL NODES ======
- name: Prepare all Kubernetes nodes
  hosts: k8s_all
  become: yes
  vars:
    cluster_admin_user: admin
    k8s_major_minor: "v1.28"             # стабильная ветка Kubernetes
    pod_network_cidr: "10.244.0.0/16"    # под Calico/Flannel (берём 10.244.0.0/16)
  environment:
    DEBIAN_FRONTEND: noninteractive
  tasks:
    - name: Ensure no swap entries in fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '^\s*[^#].*\s+swap\s+'
        state: absent

    - name: Ensure base packages present
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Ensure /etc/apt/keyrings exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    # --- Docker repo (для containerd.io) через keyring ---
    - name: Add Docker GPG key (keyring)
      shell: |
        curl -fsSL https://download.docker.com/linux/debian/gpg \
        | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker apt repository (signed-by)
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        filename: docker
        state: present

    # --- Kubernetes repo pkgs.k8s.io на нужной ветке ---
    - name: Add Kubernetes GPG key (keyring)
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/{{ k8s_major_minor }}/deb/Release.key \
        | gpg --dearmor -o /etc/apt/keyrings/kubernetes.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes.gpg

    - name: Add Kubernetes apt repository (signed-by)
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes.gpg] https://pkgs.k8s.io/core:/stable:/{{ k8s_major_minor }}/deb/ /"
        filename: kubernetes
        state: present

    - name: Update apt cache
      apt:
        update_cache: yes

    # --- containerd ---
    - name: Install containerd
      apt:
        name: containerd.io
        state: present

    - name: Generate default containerd config if missing
      shell: |
        test -f /etc/containerd/config.toml || \
        (containerd config default | tee /etc/containerd/config.toml)
      args:
        creates: /etc/containerd/config.toml

    - name: Enforce SystemdCgroup=true in containerd
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Enable & restart containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes

    # --- kernel modules & sysctl ---
    - name: Persist kernel modules
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
    - name: Load modules now
      shell: modprobe overlay && modprobe br_netfilter

    - name: Persist sysctl settings for Kubernetes networking
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables=1
          net.bridge.bridge-nf-call-ip6tables=1
          net.ipv4.ip_forward=1
    - name: Apply sysctl
      shell: sysctl --system

    # --- kubelet/kubeadm/kubectl ---
    - name: Install kubelet kubeadm kubectl from {{ k8s_major_minor }}
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

    - name: Hold k8s package versions
      shell: apt-mark hold kubelet kubeadm kubectl

    - name: Enable kubelet service
      systemd:
        name: kubelet
        state: started
        enabled: yes

# ====== 02. INIT MASTER ======
- name: Initialize control-plane on master
  hosts: k8s_master
  become: yes
  vars:
    cluster_admin_user: admin
    pod_network_cidr: "10.244.0.0/16"
  tasks:
    - name: kubeadm init (idempotent)
      shell: |
        kubeadm init \
          --pod-network-cidr={{ pod_network_cidr }} \
          --apiserver-advertise-address={{ ansible_default_ipv4.address }} \
          --cri-socket unix:///run/containerd/containerd.sock
      args:
        creates: /etc/kubernetes/admin.conf
      register: init_out

    - name: Prepare kubeconfig for {{ cluster_admin_user }}
      shell: |
        install -d -m 0755 -o {{ cluster_admin_user }} -g {{ cluster_admin_user }} /home/{{ cluster_admin_user }}/.kube
        cp -f /etc/kubernetes/admin.conf /home/{{ cluster_admin_user }}/.kube/config
        chown {{ cluster_admin_user }}:{{ cluster_admin_user }} /home/{{ cluster_admin_user }}/.kube/config

    - name: Obtain join command (with containerd socket)
      shell: kubeadm token create --print-join-command
      register: join_cmd

    - name: Save join script on master
      copy:
        dest: /tmp/k8s_join.sh
        mode: '0755'
        content: "{{ join_cmd.stdout }} --cri-socket unix:///run/containerd/containerd.sock"

    - name: Wait for API server to accept connections
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: 6443
        timeout: 120

# ====== 03. JOIN WORKERS ======
- name: Join worker nodes to the cluster
  hosts: k8s_workers
  become: yes
  vars:
    master_host: "{{ groups['k8s_master'][0] }}"
  tasks:
    - name: Fetch join script from master
      slurp:
        src: /tmp/k8s_join.sh
      register: join_file
      delegate_to: "{{ master_host }}"

    - name: Run join script (idempotent via kubelet.conf)
      shell: "{{ join_file.content | b64decode }}"
      args:
        creates: /etc/kubernetes/kubelet.conf

# ====== 04. CNI (CALICO) ======
- name: Install Calico CNI on master
  hosts: k8s_master
  become: yes
  tasks:
    - name: Apply Calico manifest
      shell: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml

    - name: Wait for calico-node to become Ready
      shell: kubectl -n kube-system wait --for=condition=ready pod -l k8s-app=calico-node --timeout=300s

# ====== 05. VERIFY (nodes + smoke test) ======
- name: Verify cluster and run a smoke test
  hosts: k8s_master
  become: yes
  tasks:
    - name: Show nodes (should be Ready on all)
      shell: kubectl get nodes -o wide
      register: nodes
    - debug:
        msg: "{{ nodes.stdout }}"

    - name: Deploy nginx in 'test' namespace and expose it
      shell: |
        kubectl create ns test --dry-run=client -o yaml | kubectl apply -f -
        kubectl create deploy nginx-test --image=nginx:alpine -n test --dry-run=client -o yaml | kubectl apply -f -
        kubectl expose deploy nginx-test --port=80 --target-port=80 -n test --dry-run=client -o yaml | kubectl apply -f -
        kubectl rollout status deploy/nginx-test -n test --timeout=180s
        kubectl get pods -n test -o wide
      register: pods
    - debug:
        msg: "{{ pods.stdout }}"
